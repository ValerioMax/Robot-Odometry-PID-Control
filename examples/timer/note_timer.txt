Il timer è una periferica che si usa per diverse cose.

Un timer è associato a un counter a 8, 16 o 32 bit
Il counter incrementa il registro TCNTx[L|H] ad una determinata frequenza
La frequenza è il clock del processore o un qualsiasi sua frazione data da un prescaler (deve essere una potenza di 2)

Ogni timer ha diversi Output Compare Registers OCRx[L|H]
quando il counter è ==, >, < , >=, <= del valore nell'OCR viene generato un evento (pin toggle, interrupt, ...)

Per configurare tipo di evento, prescaler, ... si usa il registro TCCRx[L|H]
[   per ogni timer ci sono anche più registri:
    Es: timer 1 ha TCCR1A[H|L] e TCCR1B[H|L]    ]


cli() disabilita gli interrupt
sei() abilita gli interrupt

------------------------------------------------------------

ISR(TIMER0_COMPA_vect) { ... }

Per ogni OCR di ogni timer ci sta un Interrupt Vector diverso.
Questo perché ci possono essere tanti interrupt DIVERSI su più combinazioni di timer/OCR.

TIMER0_COMPA_vect è il NOME simbolico dell'interrupt vector usato in questo programma.
Quando si verifica l'interrupt il compiler va a vedere l'effettiva ISR nell'interrupt vector con quel nome
--> quella che definiamo noi (ISR(TIMER0_COMPA_vect) { ... }) è solo una macro 
--> il compiler prende il codice ("...") definito nella macro e lo copia nell'effettiva ISR nell'interrupt vector in questione

[Tutto questo all'inizio della compilazione, poi, durante l'esecuzione la routine verrà eseguita dalla vera ISR]